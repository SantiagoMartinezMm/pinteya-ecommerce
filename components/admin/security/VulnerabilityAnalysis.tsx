"use client";

import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import {
  AlertTriangle,
  Shield,
  Search,
  RefreshCw,
  Download,
  FileText,
  Target,
  Activity,
} from "lucide-react";

interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: "critical" | "high" | "medium" | "low";
  cvss: number;
  status: "open" | "in_progress" | "resolved" | "false_positive";
  affected: {
    system: string;
    component: string;
    version: string;
  };
  discoveredAt: string;
  lastUpdated: string;
  remediation: {
    steps: string[];
    effort: "low" | "medium" | "high";
    priority: number;
  };
  references: {
    type: string;
    url: string;
  }[];
  tags: string[];
  assignee?: {
    id: string;
    name: string;
  };
}

interface VulnerabilityMetrics {
  total: number;
  bySeverity: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
  byStatus: {
    open: number;
    in_progress: number;
    resolved: number;
    false_positive: number;
  };
  averageTimeToResolve: number;
  topAffectedSystems: {
    name: string;
    count: number;
  }[];
}

export function VulnerabilityAnalysis() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [metrics, setMetrics] = useState<VulnerabilityMetrics | null>(null);
  const [loading, setLoading] = useState(true);
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(
    null
  );
  const [filters, setFilters] = useState({
    severity: "",
    status: "",
    system: "",
  });

  useEffect(() => {
    fetchVulnerabilityData();
  }, [filters]);

  const fetchVulnerabilityData = async () => {
    try {
      const [vulnsRes, metricsRes] = await Promise.all([
        fetch("/api/admin/security/vulnerabilities", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ filters }),
        }),
        fetch("/api/admin/security/vulnerabilities/metrics"),
      ]);

      const vulnsData = await vulnsRes.json();
      const metricsData = await metricsRes.json();

      setVulnerabilities(vulnsData);
      setMetrics(metricsData);
    } catch (error) {
      console.error("Error fetching vulnerability data:", error);
    } finally {
      setLoading(false);
    }
  };

  const startScan = async () => {
    try {
      await fetch("/api/admin/security/vulnerabilities/scan", {
        method: "POST",
      });
      // Iniciar polling para actualizar el progreso del escaneo
    } catch (error) {
      console.error("Error starting vulnerability scan:", error);
    }
  };

  if (loading || !metrics) {
    return <div>Cargando análisis de vulnerabilidades...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-medium">
            Análisis de Vulnerabilidades
          </h3>
          <p className="text-sm text-muted-foreground">
            Identifica y gestiona vulnerabilidades de seguridad
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={startScan}>
            <Search className="h-4 w-4 mr-2" />
            Iniciar Escaneo
          </Button>
          <Button variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Exportar
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4">
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <AlertTriangle className="h-4 w-4 text-destructive" />
              <p className="text-sm font-medium">Críticas</p>
            </div>
            <p className="text-2xl font-bold">
              {metrics.bySeverity.critical}
            </p>
          </div>
        </Card>
        {/* Más tarjetas de métricas... */}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="p-6">
          <h4 className="text-sm font-medium mb-4">
            Distribución por Severidad
          </h4>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={[
                  {
                    name: "Crítica",
                    value: metrics.bySeverity.critical,
                  },
                  { name: "Alta", value: metrics.bySeverity.high },
                  {
                    name: "Media",
                    value: metrics.bySeverity.medium,
                  },
                  { name: "Baja", value: metrics.bySeverity.low },
                ]}
                cx="50%"
                cy="50%"
                innerRadius={60}
                outerRadius={80}
                paddingAngle={5}
              >
                <Cell fill="#ef4444" />
                <Cell fill="#f97316" />
                <Cell fill="#eab308" />
                <Cell fill="#22c55e" />
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </Card>

        <Card className="p-6">
          <h4 className="text-sm font-medium mb-4">
            Sistemas más Afectados
          </h4>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={metrics.topAffectedSystems}>
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="count" fill="#3b82f6" />
            </BarChart>
          </ResponsiveContainer>
        </Card>
      </div>

      <Card className="p-6">
        <div className="flex justify-between items-center mb-4">
          <h4 className="text-sm font-medium">Vulnerabilidades</h4>
          <div className="flex gap-2">
            <Select
              value={filters.severity}
              onValueChange={(value) =>
                setFilters({ ...filters, severity: value })
              }
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Severidad" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">Todas</SelectItem>
                <SelectItem value="critical">Crítica</SelectItem>
                <SelectItem value="high">Alta</SelectItem>
                <SelectItem value="medium">Media</SelectItem>
                <SelectItem value="low">Baja</SelectItem>
              </SelectContent>
            </Select>
            {/* Más filtros... */}
          </div>
        </div>

        <ScrollArea className="h-[400px]">
          <div className="space-y-4">
            {vulnerabilities.map((vuln) => (
              <div
                key={vuln.id}
                className="p-4 border rounded-lg space-y-3"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <div className="flex items-center gap-2">
                      <Badge
                        variant={
                          vuln.severity === "critical"
                            ? "destructive"
                            : vuln.severity === "high"
                            ? "warning"
                            : "default"
                        }
                      >
                        {vuln.severity.toUpperCase()}
                      </Badge>
                      <span className="font-medium">
                        {vuln.title}
                      </span>
                    </div>
                    <p className="text-sm text-muted-foreground mt-1">
                      {vuln.description}
                    </p>
                  </div>
                  <Badge variant="outline">{vuln.status}</Badge>
                </div>

                <div className="grid grid-cols-3 gap-4 text-sm">
                  <div>
                    <p className="text-muted-foreground">
                      Sistema Afectado
                    </p>
                    <p>{vuln.affected.system}</p>
                  </div>
                  <div>
                    <p className="text-muted-foreground">
                      Componente
                    </p>
                    <p>
                      {vuln.affected.component} (
                      {vuln.affected.version})
                    </p>
                  </div>
                  <div>
                    <p className="text-muted-foreground">CVSS</p>
                    <p>{vuln.cvss}</p>
                  </div>
                </div>

                <div className="flex items-center gap-4 text-sm text-muted-foreground">
                  <div className="flex items-center gap-1">
                    <Activity className="h-4 w-4" />
                    Descubierto:{" "}
                    {new Date(vuln.discoveredAt).toLocaleString()}
                  </div>
                  {vuln.assignee && (
                    <div className="flex items-center gap-1">
                      <Target className="h-4 w-4" />
                      Asignado a: {vuln.assignee.name}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </ScrollArea>
      </Card>
    </div>
  );
}
"use client";

import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Shield,
  AlertTriangle,
  Clock,
  CheckCircle,
  XCircle,
  FileText,
  Play,
  Download,
} from "lucide-react";

interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: "low" | "medium" | "high" | "critical";
  status: "open" | "in_progress" | "resolved" | "false_positive";
  cvss_score: number;
  affected_systems: string[];
  discovery_date: string;
  last_updated: string;
  remediation_steps: string[];
  assigned_to?: string;
  references: string[];
  metadata: Record<string, any>;
}

interface VulnerabilityMetrics {
  total: number;
  bySeverity: Record<string, number>;
  byStatus: Record<string, number>;
  averageTimeToResolve: number;
  riskScore: number;
  trendsData: {
    date: string;
    count: number;
  }[];
}

export function VulnerabilityManagement() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [metrics, setMetrics] = useState<VulnerabilityMetrics | null>(null);
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(
    null
  );
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    severity: "",
    status: "",
    system: "",
  });

  useEffect(() => {
    fetchVulnerabilityData();
  }, [filters]);

  const fetchVulnerabilityData = async () => {
    try {
      const [vulnsRes, metricsRes] = await Promise.all([
        fetch("/api/admin/security/vulnerabilities"),
        fetch("/api/admin/security/vulnerabilities/metrics"),
      ]);

      const vulnsData = await vulnsRes.json();
      const metricsData = await metricsRes.json();

      setVulnerabilities(vulnsData);
      setMetrics(metricsData);
    } catch (error) {
      console.error("Error fetching vulnerability data:", error);
    } finally {
      setLoading(false);
    }
  };

  const updateVulnerabilityStatus = async (
    id: string,
    status: Vulnerability["status"]
  ) => {
    try {
      await fetch(`/api/admin/security/vulnerabilities/${id}/status`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status }),
      });

      setVulnerabilities((prev) =>
        prev.map((vuln) =>
          vuln.id === id ? { ...vuln, status } : vuln
        )
      );
    } catch (error) {
      console.error("Error updating vulnerability status:", error);
    }
  };

  if (loading || !metrics) {
    return <div>Cargando gestión de vulnerabilidades...</div>;
  }

  return (
    <div className="space-y-6">
      {/* Métricas Principales */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium">Vulnerabilidades Totales</p>
              <h3 className="text-2xl font-bold">{metrics.total}</h3>
            </div>
            <Shield className="h-8 w-8 text-primary" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium">Puntuación de Riesgo</p>
              <h3 className="text-2xl font-bold">{metrics.riskScore}</h3>
            </div>
            <AlertTriangle
              className={`h-8 w-8 ${
                metrics.riskScore > 7
                  ? "text-destructive"
                  : metrics.riskScore > 4
                  ? "text-warning"
                  : "text-success"
              }`}
            />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium">Tiempo Medio de Resolución</p>
              <h3 className="text-2xl font-bold">
                {metrics.averageTimeToResolve} días
              </h3>
            </div>
            <Clock className="h-8 w-8 text-muted-foreground" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium">Tasa de Resolución</p>
              <h3 className="text-2xl font-bold">
                {(
                  (metrics.byStatus.resolved / metrics.total) *
                  100
                ).toFixed(1)}
                %
              </h3>
            </div>
            <CheckCircle className="h-8 w-8 text-success" />
          </div>
        </Card>
      </div>

      {/* Lista de Vulnerabilidades */}
      <Card className="p-6">
        <div className="flex justify-between items-center mb-6">
          <h4 className="text-lg font-medium">Vulnerabilidades</h4>
          <div className="flex gap-4">
            <Select
              value={filters.severity}
              onValueChange={(value) =>
                setFilters((prev) => ({ ...prev, severity: value }))
              }
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Severidad" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">Todas</SelectItem>
                <SelectItem value="critical">Crítica</SelectItem>
                <SelectItem value="high">Alta</SelectItem>
                <SelectItem value="medium">Media</SelectItem>
                <SelectItem value="low">Baja</SelectItem>
              </SelectContent>
            </Select>

            <Button variant="outline">
              <Download className="h-4 w-4 mr-2" />
              Exportar
            </Button>
          </div>
        </div>

        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Título</TableHead>
              <TableHead>Severidad</TableHead>
              <TableHead>CVSS</TableHead>
              <TableHead>Estado</TableHead>
              <TableHead>Sistemas Afectados</TableHead>
              <TableHead>Última Actualización</TableHead>
              <TableHead>Acciones</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {vulnerabilities.map((vuln) => (
              <TableRow key={vuln.id}>
                <TableCell>
                  <Button
                    variant="link"
                    onClick={() => setSelectedVulnerability(vuln)}
                  >
                    {vuln.title}
                  </Button>
                </TableCell>
                <TableCell>
                  <Badge
                    variant={
                      vuln.severity === "critical"
                        ? "destructive"
                        : vuln.severity === "high"
                        ? "warning"
                        : "default"
                    }
                  >
                    {vuln.severity}
                  </Badge>
                </TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <span>{vuln.cvss_score}</span>
                    <Progress
                      value={vuln.cvss_score * 10}
                      className="w-20"
                      indicatorClassName={
                        vuln.cvss_score >= 7
                          ? "bg-destructive"
                          : vuln.cvss_score >= 4
                          ? "bg-warning"
                          : "bg-success"
                      }
                    />
                  </div>
                </TableCell>
                <TableCell>
                  <Badge
                    variant={
                      vuln.status === "resolved"
                        ? "success"
                        : vuln.status === "in_progress"
                        ? "warning"
                        : "default"
                    }
                  >
                    {vuln.status}
                  </Badge>
                </TableCell>
                <TableCell>{vuln.affected_systems.length}</TableCell>
                <TableCell>
                  {new Date(vuln.last_updated).toLocaleDateString()}
                </TableCell>
                <TableCell>
                  <div className="flex gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setSelectedVulnerability(vuln)}
                    >
                      <FileText className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() =>
                        updateVulnerabilityStatus(vuln.id, "in_progress")
                      }
                    >
                      <Play className="h-4 w-4" />
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </Card>

      {/* Diálogo de Detalles */}
      {selectedVulnerability && (
        <Dialog
          open={!!selectedVulnerability}
          onOpenChange={() => setSelectedVulnerability(null)}
        >
          <DialogContent className="max-w-4xl">
            <DialogHeader>
              <DialogTitle>{selectedVulnerability.title}</DialogTitle>
            </DialogHeader>
            <Tabs defaultValue="details">
              <TabsList>
                <TabsTrigger value="details">Detalles</TabsTrigger>
                <TabsTrigger value="remediation">Remediación</TabsTrigger>
                <TabsTrigger value="systems">Sistemas Afectados</TabsTrigger>
                <TabsTrigger value="references">Referencias</TabsTrigger>
              </TabsList>

              <TabsContent value="details" className="space-y-4">
                <div className="space-y-4">
                  <div>
                    <h4 className="text-sm font-medium">Descripción</h4>
                    <p className="text-sm text-muted-foreground mt-1">
                      {selectedVulnerability.description}
                    </p>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <h4 className="text-sm font-medium">CVSS Score</h4>
                      <p className="text-2xl font-bold">
                        {selectedVulnerability.cvss_score}
                      </p>
                    </div>
                    <div>
                      <h4 className="text-sm font-medium">Estado</h4>
                      <Badge
                        variant={
                          selectedVulnerability.status === "resolved"
                            ? "success"
                            : "warning"
                        }
                      >
                        {selectedVulnerability.status}
                      </Badge>
                    </div>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="remediation">
                <div className="space-y-4">
                  {selectedVulnerability.remediation_steps.map((step, index) => (
                    <div
                      key={index}
                      className="flex items-start gap-2 p-4 border rounded-lg"
                    >
                      <div className="w-6 h-6 rounded-full bg-muted flex items-center justify-center">
                        {index + 1}
                      </div>
                      <p className="text-sm">{step}</p>
                    </div>
                  ))}
                </div>
              </TabsContent>

              {/* Más contenido de pestañas... */}
            </Tabs>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}
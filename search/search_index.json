{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a PinteYa! \ud83c\udfa8","text":""},{"location":"#acerca-de-pinteya","title":"Acerca de PinteYa!","text":"<p>PinteYa! es una plataforma de comercio electr\u00f3nico moderna especializada en la venta de pinturas y productos relacionados. Nuestro objetivo es proporcionar una experiencia de compra excepcional tanto para compradores como para vendedores en el mercado de pinturas.</p>"},{"location":"#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":""},{"location":"#para-compradores","title":"Para Compradores \ud83d\uded2","text":"<ul> <li>Cat\u00e1logo intuitivo con b\u00fasqueda avanzada</li> <li>Sistema de carrito de compras optimizado</li> <li>Proceso de pago seguro</li> <li>Seguimiento de pedidos en tiempo real</li> <li>Sistema de rese\u00f1as y calificaciones</li> </ul>"},{"location":"#para-vendedores","title":"Para Vendedores \ud83d\udcbc","text":"<ul> <li>Panel de administraci\u00f3n completo</li> <li>Gesti\u00f3n de inventario</li> <li>An\u00e1lisis de ventas</li> <li>Herramientas de marketing</li> <li>Gesti\u00f3n de pedidos</li> </ul>"},{"location":"#para-administradores","title":"Para Administradores \ud83d\udd27","text":"<ul> <li>Control total del sistema</li> <li>Gesti\u00f3n de usuarios</li> <li>An\u00e1lisis avanzado</li> <li>Configuraci\u00f3n de seguridad</li> <li>Monitoreo en tiempo real</li> </ul>"},{"location":"#arquitectura","title":"Arquitectura","text":"<pre><code>graph TD\n    A[Cliente] --&gt;|Next.js| B[Frontend]\n    B --&gt;|API Routes| C[Backend]\n    C --&gt;|Supabase| D[Base de Datos]\n    C --&gt;|Redis| E[Cache]\n    B --&gt;|Edge Functions| F[CDN]</code></pre>"},{"location":"#comenzando","title":"Comenzando","text":"<ul> <li>\ud83d\udcda Gu\u00eda de Instalaci\u00f3n</li> <li>\ud83d\udcbb Gu\u00eda de Desarrollo</li> <li>\ud83d\ude80 Gu\u00eda de Despliegue</li> <li>\ud83e\udd1d C\u00f3mo Contribuir</li> </ul>"},{"location":"#recursos-adicionales","title":"Recursos Adicionales","text":"<ul> <li>GitHub Repository</li> <li>Documentaci\u00f3n de la API</li> <li>Changelog</li> </ul>"},{"location":"#soporte","title":"Soporte","text":"<p>Si necesitas ayuda, puedes:</p> <ol> <li>Revisar nuestra documentaci\u00f3n</li> <li>Abrir un issue</li> <li>Contactar al equipo de desarrollo</li> </ol>"},{"location":"api/introduction/","title":"Introducci\u00f3n a la API","text":"<p>La API de PinteYa! est\u00e1 construida sobre Next.js API Routes y proporciona endpoints RESTful para interactuar con la plataforma.</p>"},{"location":"api/introduction/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>\ud83d\udd12 Autenticaci\u00f3n basada en JWT</li> <li>\ud83d\udce1 Endpoints RESTful</li> <li>\ud83d\udcdd Validaci\u00f3n de datos con Zod</li> <li>\ud83d\ude80 Edge Functions para mejor rendimiento</li> <li>\ud83d\udcca Rate limiting y cach\u00e9</li> </ul>"},{"location":"api/introduction/#base-url","title":"Base URL","text":"<pre><code>https://pinteya.vercel.app/api\n</code></pre> <p>Para desarrollo local:</p> <pre><code>http://localhost:3000/api\n</code></pre>"},{"location":"api/introduction/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>La API utiliza tokens JWT para autenticaci\u00f3n. Incluye el token en el header:</p> <pre><code>Authorization: Bearer &lt;tu-token&gt;\n</code></pre>"},{"location":"api/introduction/#formato-de-respuesta","title":"Formato de Respuesta","text":"<p>Todas las respuestas siguen este formato:</p> <pre><code>{\n  \"success\": true,\n  \"data\": {\n    // Los datos solicitados\n  },\n  \"error\": null\n}\n</code></pre> <p>En caso de error:</p> <pre><code>{\n  \"success\": false,\n  \"data\": null,\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Descripci\u00f3n del error\"\n  }\n}\n</code></pre>"},{"location":"api/introduction/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>100 requests por minuto para usuarios autenticados</li> <li>20 requests por minuto para usuarios no autenticados</li> </ul>"},{"location":"api/introduction/#endpoints-principales","title":"Endpoints Principales","text":""},{"location":"api/introduction/#productos","title":"Productos","text":"<ul> <li><code>GET /api/products</code> - Listar productos</li> <li><code>POST /api/products</code> - Crear producto</li> <li><code>GET /api/products/:id</code> - Obtener producto</li> <li><code>PUT /api/products/:id</code> - Actualizar producto</li> <li><code>DELETE /api/products/:id</code> - Eliminar producto</li> </ul>"},{"location":"api/introduction/#pedidos","title":"Pedidos","text":"<ul> <li><code>GET /api/orders</code> - Listar pedidos</li> <li><code>POST /api/orders</code> - Crear pedido</li> <li><code>GET /api/orders/:id</code> - Obtener pedido</li> <li><code>PUT /api/orders/:id</code> - Actualizar pedido</li> </ul>"},{"location":"api/introduction/#usuarios","title":"Usuarios","text":"<ul> <li><code>POST /api/auth/register</code> - Registrar usuario</li> <li><code>POST /api/auth/login</code> - Iniciar sesi\u00f3n</li> <li><code>POST /api/auth/logout</code> - Cerrar sesi\u00f3n</li> <li><code>GET /api/users/me</code> - Obtener perfil</li> </ul>"},{"location":"api/introduction/#codigos-de-estado","title":"C\u00f3digos de Estado","text":"C\u00f3digo Descripci\u00f3n 200 \u00c9xito 201 Creado exitosamente 400 Error en la solicitud 401 No autorizado 403 Prohibido 404 No encontrado 429 Demasiadas solicitudes 500 Error del servidor"},{"location":"api/introduction/#manejo-de-errores","title":"Manejo de Errores","text":"<p>Los errores incluyen un c\u00f3digo espec\u00edfico:</p> <pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"PRODUCT_NOT_FOUND\",\n    \"message\": \"El producto solicitado no existe\"\n  }\n}\n</code></pre> <p>C\u00f3digos comunes:</p> <ul> <li><code>INVALID_INPUT</code> - Datos de entrada inv\u00e1lidos</li> <li><code>NOT_AUTHENTICATED</code> - Usuario no autenticado</li> <li><code>NOT_AUTHORIZED</code> - Usuario no autorizado</li> <li><code>RESOURCE_NOT_FOUND</code> - Recurso no encontrado</li> <li><code>RATE_LIMIT_EXCEEDED</code> - L\u00edmite de solicitudes excedido</li> </ul>"},{"location":"api/introduction/#ejemplos","title":"Ejemplos","text":""},{"location":"api/introduction/#listar-productos","title":"Listar Productos","text":"<pre><code>GET /api/products?limit=10&amp;offset=0\n</code></pre> <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"products\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Pintura L\u00e1tex\",\n        \"price\": 2500,\n        \"stock\": 100\n      }\n    ],\n    \"total\": 150,\n    \"limit\": 10,\n    \"offset\": 0\n  }\n}\n</code></pre>"},{"location":"api/introduction/#crear-pedido","title":"Crear Pedido","text":"<pre><code>POST /api/orders\nContent-Type: application/json\n\n{\n  \"items\": [\n    {\n      \"productId\": \"1\",\n      \"quantity\": 2\n    }\n  ],\n  \"shippingAddress\": {\n    \"street\": \"Calle Principal\",\n    \"city\": \"Ciudad\",\n    \"zip\": \"12345\"\n  }\n}\n</code></pre>"},{"location":"api/introduction/#sdks-y-herramientas","title":"SDKs y Herramientas","text":"<ul> <li>TypeScript SDK</li> <li>Postman Collection</li> <li>OpenAPI Spec</li> </ul>"},{"location":"api/introduction/#soporte","title":"Soporte","text":"<p>Para ayuda con la API:</p> <ol> <li>Revisa la documentaci\u00f3n detallada</li> <li>\u00danete a nuestro Discord</li> <li>Abre un issue</li> </ol>"},{"location":"architecture/overview/","title":"Arquitectura General","text":"<p>PinteYa! est\u00e1 construido con una arquitectura moderna y escalable, utilizando las mejores pr\u00e1cticas y tecnolog\u00edas actuales.</p>"},{"location":"architecture/overview/#diagrama-de-arquitectura","title":"Diagrama de Arquitectura","text":"<pre><code>graph TD\n    subgraph \"Frontend\"\n        A[Cliente Web] --&gt;|Next.js| B[App Router]\n        B --&gt; C[Componentes React]\n        C --&gt; D[Estado Global]\n        D --&gt; E[Zustand]\n        D --&gt; F[React Query]\n    end\n\n    subgraph \"Backend\"\n        G[API Routes] --&gt; H[Controladores]\n        H --&gt; I[Servicios]\n        I --&gt; J[Repositorios]\n    end\n\n    subgraph \"Base de Datos\"\n        K[Supabase] --&gt; L[PostgreSQL]\n        K --&gt; M[Auth]\n        K --&gt; N[Storage]\n    end\n\n    subgraph \"Servicios\"\n        O[Redis Cache]\n        P[CDN]\n        Q[Email Service]\n    end\n\n    A --&gt;|API Calls| G\n    I --&gt; K\n    I --&gt; O\n    A --&gt; P\n    I --&gt; Q</code></pre>"},{"location":"architecture/overview/#capas-de-la-aplicacion","title":"Capas de la Aplicaci\u00f3n","text":""},{"location":"architecture/overview/#1-frontend-cliente","title":"1. Frontend (Cliente)","text":"<ul> <li>Framework: Next.js 13+ con App Router</li> <li>UI: React + Tailwind CSS + Shadcn/ui</li> <li>Estado:</li> <li>Zustand para estado global</li> <li>React Query para estado del servidor</li> <li>Formularios: React Hook Form + Zod</li> </ul>"},{"location":"architecture/overview/#2-backend-servidor","title":"2. Backend (Servidor)","text":"<ul> <li>API: Next.js API Routes</li> <li>Autenticaci\u00f3n: NextAuth.js + Supabase Auth</li> <li>Validaci\u00f3n: Zod</li> <li>Cach\u00e9: Redis</li> </ul>"},{"location":"architecture/overview/#3-base-de-datos","title":"3. Base de Datos","text":"<ul> <li>Principal: PostgreSQL (Supabase)</li> <li>Cach\u00e9: Redis</li> <li>Almacenamiento: Supabase Storage</li> </ul>"},{"location":"architecture/overview/#flujo-de-datos","title":"Flujo de Datos","text":"<ol> <li>Request del Cliente</li> </ol> <pre><code>sequenceDiagram\n    Cliente-&gt;&gt;+Next.js: Request HTTP\n    Next.js-&gt;&gt;+API Route: Procesa Request\n    API Route-&gt;&gt;+Servicio: Llama Servicio\n    Servicio-&gt;&gt;+DB: Query\n    DB-&gt;&gt;-Servicio: Resultado\n    Servicio-&gt;&gt;-API Route: Respuesta\n    API Route-&gt;&gt;-Next.js: Datos\n    Next.js-&gt;&gt;-Cliente: Respuesta HTML/JSON</code></pre> <ol> <li>Actualizaci\u00f3n de Estado <pre><code>sequenceDiagram\n    Cliente-&gt;&gt;+React Query: Mutaci\u00f3n\n    React Query-&gt;&gt;+API: Request\n    API-&gt;&gt;+DB: Update\n    DB-&gt;&gt;-API: Confirmaci\u00f3n\n    API-&gt;&gt;-React Query: Respuesta\n    React Query-&gt;&gt;-Cliente: UI Update</code></pre></li> </ol>"},{"location":"architecture/overview/#seguridad","title":"Seguridad","text":""},{"location":"architecture/overview/#autenticacion","title":"Autenticaci\u00f3n","text":"<ul> <li>JWT para tokens de acceso</li> <li>Refresh tokens para sesiones largas</li> <li>2FA opcional</li> </ul>"},{"location":"architecture/overview/#autorizacion","title":"Autorizaci\u00f3n","text":"<ul> <li>RBAC (Role-Based Access Control)</li> <li>Pol\u00edticas a nivel de base de datos</li> <li>Middleware de validaci\u00f3n</li> </ul>"},{"location":"architecture/overview/#optimizacion","title":"Optimizaci\u00f3n","text":""},{"location":"architecture/overview/#performance","title":"Performance","text":"<ul> <li>SSR/SSG seg\u00fan necesidad</li> <li>Cach\u00e9 en m\u00faltiples niveles</li> <li>CDN para assets</li> </ul>"},{"location":"architecture/overview/#seo","title":"SEO","text":"<ul> <li>Metadata din\u00e1mica</li> <li>Sitemap autom\u00e1tico</li> <li>Rutas amigables</li> </ul>"},{"location":"architecture/overview/#monitoreo","title":"Monitoreo","text":"<ul> <li>Logs:</li> <li>Aplicaci\u00f3n</li> <li>Acceso</li> <li>Errores</li> <li>M\u00e9tricas:</li> <li>Performance</li> <li>Uso</li> <li>Errores</li> <li>Alertas:</li> <li>Disponibilidad</li> <li>Performance</li> <li>Seguridad</li> </ul>"},{"location":"architecture/overview/#escalabilidad","title":"Escalabilidad","text":""},{"location":"architecture/overview/#horizontal","title":"Horizontal","text":"<ul> <li>Serverless functions</li> <li>Cach\u00e9 distribuido</li> <li>CDN global</li> </ul>"},{"location":"architecture/overview/#vertical","title":"Vertical","text":"<ul> <li>Optimizaci\u00f3n de queries</li> <li>\u00cdndices de base de datos</li> <li>Compresi\u00f3n de assets</li> </ul>"},{"location":"architecture/overview/#integracion-continua","title":"Integraci\u00f3n Continua","text":"<pre><code>graph LR\n    A[Commit] --&gt; B[GitHub Actions]\n    B --&gt; C{Tests}\n    C --&gt;|Pass| D[Build]\n    D --&gt;|Success| E[Deploy Preview]\n    E --&gt; F{Review}\n    F --&gt;|Approved| G[Production]\n    C --&gt;|Fail| H[Notify]\n    D --&gt;|Fail| H</code></pre>"},{"location":"architecture/overview/#consideraciones-futuras","title":"Consideraciones Futuras","text":"<ol> <li> <p>Microservicios</p> </li> <li> <p>Separar funcionalidades cr\u00edticas</p> </li> <li>API Gateway</li> <li> <p>Service Mesh</p> </li> <li> <p>Machine Learning</p> </li> <li> <p>Recomendaciones</p> </li> <li>An\u00e1lisis de fraude</li> <li> <p>Predicci\u00f3n de demanda</p> </li> <li> <p>Internacionalizaci\u00f3n</p> </li> <li>M\u00faltiples idiomas</li> <li>M\u00faltiples monedas</li> <li>M\u00faltiples regiones</li> </ol>"},{"location":"architecture/overview/#referencias","title":"Referencias","text":"<ul> <li>Documentaci\u00f3n de Next.js</li> <li>Supabase</li> <li>Arquitectura de Referencia</li> </ul>"},{"location":"guides/deployment/","title":"Gu\u00eda de Despliegue","text":"<p>Esta gu\u00eda te ayudar\u00e1 a desplegar PinteYa! en producci\u00f3n utilizando Vercel y Supabase.</p>"},{"location":"guides/deployment/#preparacion","title":"Preparaci\u00f3n","text":""},{"location":"guides/deployment/#1-requisitos-previos","title":"1. Requisitos Previos","text":"<ul> <li>Cuenta en Vercel</li> <li>Cuenta en Supabase</li> <li>Dominio personalizado (opcional)</li> </ul>"},{"location":"guides/deployment/#2-variables-de-entorno","title":"2. Variables de Entorno","text":"<p>Aseg\u00farate de tener todas las variables de entorno necesarias:</p> <pre><code># Supabase\nNEXT_PUBLIC_SUPABASE_URL=\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\nSUPABASE_SERVICE_ROLE_KEY=\n\n# Autenticaci\u00f3n\nNEXTAUTH_URL=\nNEXTAUTH_SECRET=\n\n# Redis (opcional)\nREDIS_URL=\n\n# Stripe (opcional)\nSTRIPE_SECRET_KEY=\nSTRIPE_WEBHOOK_SECRET=\n</code></pre>"},{"location":"guides/deployment/#despliegue-en-vercel","title":"Despliegue en Vercel","text":""},{"location":"guides/deployment/#1-configuracion-inicial","title":"1. Configuraci\u00f3n Inicial","text":"<ol> <li>Conecta tu repositorio de GitHub con Vercel</li> <li>Selecciona el repositorio <code>pinteya-ecommerce</code></li> <li>Configura el proyecto:</li> <li>Framework Preset: Next.js</li> <li>Root Directory: ./</li> <li>Build Command: <code>pnpm build</code></li> <li>Output Directory: .next</li> </ol>"},{"location":"guides/deployment/#2-variables-de-entorno_1","title":"2. Variables de Entorno","text":"<ol> <li>Ve a Settings &gt; Environment Variables</li> <li>A\u00f1ade todas las variables de entorno necesarias</li> <li>Marca las variables p\u00fablicas con <code>NEXT_PUBLIC_</code></li> </ol>"},{"location":"guides/deployment/#3-dominio-personalizado","title":"3. Dominio Personalizado","text":"<ol> <li>Ve a Settings &gt; Domains</li> <li>A\u00f1ade tu dominio personalizado</li> <li>Configura los registros DNS seg\u00fan las instrucciones</li> </ol>"},{"location":"guides/deployment/#configuracion-de-supabase","title":"Configuraci\u00f3n de Supabase","text":""},{"location":"guides/deployment/#1-base-de-datos","title":"1. Base de Datos","text":"<ol> <li>Crea un nuevo proyecto en Supabase</li> <li>Ejecuta las migraciones:    <pre><code>pnpm supabase db push\n</code></pre></li> </ol>"},{"location":"guides/deployment/#2-autenticacion","title":"2. Autenticaci\u00f3n","text":"<ol> <li>Configura los proveedores de autenticaci\u00f3n</li> <li>A\u00f1ade los dominios permitidos</li> <li>Configura las redirecciones</li> </ol>"},{"location":"guides/deployment/#3-storage","title":"3. Storage","text":"<ol> <li>Crea los buckets necesarios</li> <li>Configura las pol\u00edticas de acceso</li> <li>Habilita las transformaciones de im\u00e1genes</li> </ol>"},{"location":"guides/deployment/#configuracion-de-redis-opcional","title":"Configuraci\u00f3n de Redis (Opcional)","text":"<p>Si est\u00e1s usando Redis para cach\u00e9:</p> <ol> <li>Crea una instancia en Upstash</li> <li>Obt\u00e9n la URL de conexi\u00f3n</li> <li>A\u00f1ade la URL a las variables de entorno</li> </ol>"},{"location":"guides/deployment/#configuracion-de-stripe-opcional","title":"Configuraci\u00f3n de Stripe (Opcional)","text":"<p>Para procesar pagos:</p> <ol> <li>Crea una cuenta en Stripe</li> <li>Configura los webhooks</li> <li>A\u00f1ade las claves API a las variables de entorno</li> </ol>"},{"location":"guides/deployment/#monitoreo","title":"Monitoreo","text":""},{"location":"guides/deployment/#1-logs","title":"1. Logs","text":"<p>Configura el monitoreo de logs:</p> <pre><code>graph TD\n    A[Vercel Logs] --&gt; B[Error Tracking]\n    A --&gt; C[Performance]\n    A --&gt; D[User Activity]</code></pre>"},{"location":"guides/deployment/#2-analytics","title":"2. Analytics","text":"<p>Implementa an\u00e1lisis con:</p> <ul> <li>Vercel Analytics</li> <li>Google Analytics</li> <li>Plausible</li> </ul>"},{"location":"guides/deployment/#3-alertas","title":"3. Alertas","text":"<p>Configura alertas para:</p> <ul> <li>Errores del servidor</li> <li>Problemas de rendimiento</li> <li>Actividad sospechosa</li> </ul>"},{"location":"guides/deployment/#cicd","title":"CI/CD","text":"<p>El despliegue continuo est\u00e1 configurado a trav\u00e9s de:</p> <ol> <li>GitHub Actions para pruebas</li> <li>Vercel para preview deployments</li> <li>Producci\u00f3n autom\u00e1tica en main</li> </ol> <pre><code>graph LR\n    A[Commit] --&gt; B[GitHub Actions]\n    B --&gt; C{Tests Pass?}\n    C --&gt;|Yes| D[Preview]\n    D --&gt; E{Review OK?}\n    E --&gt;|Yes| F[Production]\n    C --&gt;|No| G[Fail]\n    E --&gt;|No| G</code></pre>"},{"location":"guides/deployment/#lista-de-verificacion-de-despliegue","title":"Lista de Verificaci\u00f3n de Despliegue","text":"<ul> <li>[ ] Variables de entorno configuradas</li> <li>[ ] Base de datos migrada</li> <li>[ ] Autenticaci\u00f3n configurada</li> <li>[ ] Storage configurado</li> <li>[ ] SSL/TLS habilitado</li> <li>[ ] Dominio personalizado configurado</li> <li>[ ] Monitoreo activado</li> <li>[ ] Backups configurados</li> <li>[ ] Webhooks configurados</li> <li>[ ] Pruebas de producci\u00f3n realizadas</li> </ul>"},{"location":"guides/deployment/#solucion-de-problemas","title":"Soluci\u00f3n de Problemas","text":""},{"location":"guides/deployment/#error-failed-to-fetch-api","title":"Error: Failed to fetch API","text":"<ol> <li>Verifica las variables de entorno</li> <li>Comprueba los logs de Vercel</li> <li>Verifica la conexi\u00f3n con Supabase</li> </ol>"},{"location":"guides/deployment/#error-authentication-failed","title":"Error: Authentication failed","text":"<ol> <li>Verifica las claves de API</li> <li>Comprueba la configuraci\u00f3n de CORS</li> <li>Verifica los dominios permitidos</li> </ol>"},{"location":"guides/deployment/#error-database-connection-failed","title":"Error: Database connection failed","text":"<ol> <li>Verifica la URL de conexi\u00f3n</li> <li>Comprueba los firewalls</li> <li>Verifica los l\u00edmites de conexi\u00f3n</li> </ol>"},{"location":"guides/deployment/#mantenimiento","title":"Mantenimiento","text":""},{"location":"guides/deployment/#diario","title":"Diario","text":"<ul> <li>Monitorear logs</li> <li>Verificar m\u00e9tricas</li> <li>Revisar alertas</li> </ul>"},{"location":"guides/deployment/#semanal","title":"Semanal","text":"<ul> <li>Revisar backups</li> <li>Actualizar dependencias</li> <li>Analizar rendimiento</li> </ul>"},{"location":"guides/deployment/#mensual","title":"Mensual","text":"<ul> <li>Revisar seguridad</li> <li>Actualizar certificados</li> <li>Optimizar base de datos</li> </ul>"},{"location":"guides/deployment/#recursos","title":"Recursos","text":"<ul> <li>Documentaci\u00f3n de Vercel</li> <li>Documentaci\u00f3n de Supabase</li> <li>Gu\u00eda de Next.js</li> </ul>"},{"location":"guides/development/","title":"Gu\u00eda de Desarrollo","text":"<p>Esta gu\u00eda proporciona informaci\u00f3n detallada sobre el desarrollo en PinteYa!</p>"},{"location":"guides/development/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<pre><code>pinteya-ecommerce/\n\u251c\u2500\u2500 app/                    # App Router de Next.js\n\u2502   \u251c\u2500\u2500 (auth)/            # Rutas de autenticaci\u00f3n\n\u2502   \u251c\u2500\u2500 (dashboard)/       # Panel de administraci\u00f3n\n\u2502   \u2514\u2500\u2500 api/               # API Routes\n\u251c\u2500\u2500 components/            # Componentes React\n\u2502   \u251c\u2500\u2500 admin/            # Componentes del panel admin\n\u2502   \u251c\u2500\u2500 auth/             # Componentes de autenticaci\u00f3n\n\u2502   \u2514\u2500\u2500 ui/               # Componentes de UI reutilizables\n\u251c\u2500\u2500 hooks/                # Custom hooks\n\u251c\u2500\u2500 lib/                  # Utilidades y configuraciones\n\u251c\u2500\u2500 public/              # Archivos est\u00e1ticos\n\u2514\u2500\u2500 types/               # Definiciones de TypeScript\n</code></pre>"},{"location":"guides/development/#convenciones-de-codigo","title":"Convenciones de C\u00f3digo","text":""},{"location":"guides/development/#nombrado","title":"Nombrado","text":"<pre><code>// Componentes\nfunction ProductCard() { ... }  // PascalCase para componentes\nfunction useProducts() { ... }  // camelCase para hooks\nconst fetchProducts = () =&gt; ... // camelCase para funciones\n\n// Types e Interfaces\ninterface Product { ... }       // PascalCase para types\ntype ProductStatus = ...\n</code></pre>"},{"location":"guides/development/#imports","title":"Imports","text":"<pre><code>// 1. Imports de React/Next.js\nimport { useState, useEffect } from 'react'\nimport Image from 'next/image'\n\n// 2. Imports de librer\u00edas externas\nimport { motion } from 'framer-motion'\n\n// 3. Imports internos\nimport { useProducts } from '@/hooks/useProducts'\nimport { Button } from '@/components/ui/button'\n</code></pre>"},{"location":"guides/development/#estado-global","title":"Estado Global","text":"<p>Utilizamos diferentes soluciones seg\u00fan el caso:</p>"},{"location":"guides/development/#zustand-para-estado-global","title":"Zustand para Estado Global","text":"<pre><code>import create from 'zustand'\n\ninterface CartStore {\n  items: Product[]\n  addItem: (product: Product) =&gt; void\n}\n\nexport const useCartStore = create&lt;CartStore&gt;(set =&gt; ({\n  items: [],\n  addItem: product =&gt;\n    set(state =&gt; ({\n      items: [...state.items, product],\n    })),\n}))\n</code></pre>"},{"location":"guides/development/#react-query-para-estado-del-servidor","title":"React Query para Estado del Servidor","text":"<pre><code>import { useQuery } from '@tanstack/react-query'\n\nexport function useProducts() {\n  return useQuery({\n    queryKey: ['products'],\n    queryFn: fetchProducts,\n  })\n}\n</code></pre>"},{"location":"guides/development/#manejo-de-formularios","title":"Manejo de Formularios","text":"<p>Utilizamos <code>react-hook-form</code> con <code>zod</code> para validaci\u00f3n:</p> <pre><code>import { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport * as z from 'zod'\n\nconst schema = z.object({\n  name: z.string().min(2),\n  price: z.number().positive(),\n})\n\nexport function ProductForm() {\n  const form = useForm({\n    resolver: zodResolver(schema),\n  })\n  // ...\n}\n</code></pre>"},{"location":"guides/development/#estilos","title":"Estilos","text":""},{"location":"guides/development/#tailwind-css","title":"Tailwind CSS","text":"<p>Seguimos una estructura consistente:</p> <pre><code>&lt;div\n  className=\"\n  flex items-center justify-between  // Layout\n  p-4 mb-2                          // Espaciado\n  bg-white dark:bg-gray-800         // Colores\n  rounded-lg shadow-sm              // Efectos\n  hover:shadow-md transition-shadow // Interactividad\n\"\n&gt;\n  {/* Contenido */}\n&lt;/div&gt;\n</code></pre>"},{"location":"guides/development/#componentes-shadcnui","title":"Componentes Shadcn/ui","text":"<pre><code>import {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent\n} from \"@/components/ui/card\"\n\nexport function ProductCard() {\n  return (\n    &lt;Card&gt;\n      &lt;CardHeader&gt;\n        &lt;CardTitle&gt;Producto&lt;/CardTitle&gt;\n        &lt;CardDescription&gt;Descripci\u00f3n&lt;/CardDescription&gt;\n      &lt;/CardHeader&gt;\n      &lt;CardContent&gt;\n        {/* Contenido */}\n      &lt;/CardContent&gt;\n    &lt;/Card&gt;\n  )\n}\n</code></pre>"},{"location":"guides/development/#testing","title":"Testing","text":""},{"location":"guides/development/#pruebas-unitarias-con-jest","title":"Pruebas Unitarias con Jest","text":"<pre><code>import { render, screen } from '@testing-library/react'\nimport { ProductCard } from './ProductCard'\n\ndescribe('ProductCard', () =&gt; {\n  it('renders product information correctly', () =&gt; {\n    render(&lt;ProductCard name=\"Test Product\" price={100} /&gt;)\n    expect(screen.getByText('Test Product')).toBeInTheDocument()\n  })\n})\n</code></pre>"},{"location":"guides/development/#pruebas-e2e-con-playwright","title":"Pruebas E2E con Playwright","text":"<pre><code>import { test, expect } from '@playwright/test'\n\ntest('user can add product to cart', async ({ page }) =&gt; {\n  await page.goto('/products')\n  await page.click('[data-testid=\"add-to-cart\"]')\n  await expect(page.locator('[data-testid=\"cart-count\"]')).toHaveText('1')\n})\n</code></pre>"},{"location":"guides/development/#cicd","title":"CI/CD","text":"<p>Utilizamos GitHub Actions para:</p> <ul> <li>Ejecutar pruebas</li> <li>Verificar tipos</li> <li>Linting</li> <li>Build de producci\u00f3n</li> <li>Despliegue autom\u00e1tico</li> </ul>"},{"location":"guides/development/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<ol> <li> <p>Performance</p> </li> <li> <p>Usar Image de Next.js para im\u00e1genes</p> </li> <li>Implementar lazy loading</li> <li> <p>Optimizar bundles</p> </li> <li> <p>Seguridad</p> </li> <li> <p>Validar inputs</p> </li> <li>Sanitizar datos</li> <li> <p>Usar CSRF tokens</p> </li> <li> <p>Accesibilidad</p> </li> <li>Usar roles ARIA</li> <li>Asegurar contraste de colores</li> <li>Soportar navegaci\u00f3n por teclado</li> </ol>"},{"location":"guides/development/#recursos-utiles","title":"Recursos \u00datiles","text":"<ul> <li>Documentaci\u00f3n de Next.js</li> <li>Documentaci\u00f3n de Supabase</li> <li>Gu\u00eda de Tailwind CSS</li> <li>Componentes Shadcn/ui</li> </ul>"},{"location":"guides/installation/","title":"Gu\u00eda de Instalaci\u00f3n","text":"<p>Esta gu\u00eda te ayudar\u00e1 a configurar PinteYa! en tu entorno local de desarrollo.</p>"},{"location":"guides/installation/#requisitos-previos","title":"Requisitos Previos","text":"<p>Antes de comenzar, aseg\u00farate de tener instalado:</p> <ul> <li>Node.js (v18 o superior)</li> <li>pnpm (recomendado) o npm</li> <li>Git</li> <li>Un editor de c\u00f3digo (recomendamos VS Code)</li> <li>Una cuenta en Supabase</li> </ul>"},{"location":"guides/installation/#paso-1-clonar-el-repositorio","title":"Paso 1: Clonar el Repositorio","text":"<pre><code>git clone https://github.com/SantiagoMartinezMm/pinteya-ecommerce.git\ncd pinteya-ecommerce\n</code></pre>"},{"location":"guides/installation/#paso-2-instalar-dependencias","title":"Paso 2: Instalar Dependencias","text":"<pre><code>pnpm install\n</code></pre>"},{"location":"guides/installation/#paso-3-configurar-variables-de-entorno","title":"Paso 3: Configurar Variables de Entorno","text":"<ol> <li>Copia el archivo de ejemplo:</li> </ol> <pre><code>cp .env.example .env.local\n</code></pre> <ol> <li>Configura las siguientes variables en <code>.env.local</code>:</li> </ol> <pre><code># Supabase\nNEXT_PUBLIC_SUPABASE_URL=tu-url-de-supabase\nNEXT_PUBLIC_SUPABASE_ANON_KEY=tu-clave-anonima\nSUPABASE_SERVICE_ROLE_KEY=tu-clave-de-servicio\n\n# Autenticaci\u00f3n\nNEXTAUTH_URL=http://localhost:3000\nNEXTAUTH_SECRET=tu-secreto-seguro\n\n# Redis (opcional)\nREDIS_URL=tu-url-de-redis\n</code></pre>"},{"location":"guides/installation/#paso-4-configurar-la-base-de-datos","title":"Paso 4: Configurar la Base de Datos","text":"<ol> <li>Crea un proyecto en Supabase</li> <li>Ejecuta las migraciones:    <pre><code>pnpm supabase db push\n</code></pre></li> </ol>"},{"location":"guides/installation/#paso-5-iniciar-el-servidor-de-desarrollo","title":"Paso 5: Iniciar el Servidor de Desarrollo","text":"<pre><code>pnpm dev\n</code></pre> <p>La aplicaci\u00f3n estar\u00e1 disponible en <code>http://localhost:3000</code></p>"},{"location":"guides/installation/#paso-6-configurar-el-editor","title":"Paso 6: Configurar el Editor","text":""},{"location":"guides/installation/#vs-code","title":"VS Code","text":"<p>Recomendamos instalar las siguientes extensiones:</p> <ul> <li>ESLint</li> <li>Prettier</li> <li>Tailwind CSS IntelliSense</li> <li>TypeScript and JavaScript Language Features</li> </ul>"},{"location":"guides/installation/#configuracion-recomendada","title":"Configuraci\u00f3n Recomendada","text":"<p>A\u00f1ade esto a tu <code>settings.json</code>:</p> <pre><code>{\n  \"editor.formatOnSave\": true,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  }\n}\n</code></pre>"},{"location":"guides/installation/#solucion-de-problemas","title":"Soluci\u00f3n de Problemas","text":""},{"location":"guides/installation/#error-cannot-find-module","title":"Error: Cannot find module...","text":"<ul> <li>Ejecuta <code>pnpm install</code> nuevamente</li> <li>Verifica que est\u00e1s usando la versi\u00f3n correcta de Node.js</li> </ul>"},{"location":"guides/installation/#error-de-conexion-con-supabase","title":"Error de conexi\u00f3n con Supabase","text":"<ul> <li>Verifica tus credenciales en <code>.env.local</code></li> <li>Aseg\u00farate de que tu proyecto en Supabase est\u00e9 activo</li> </ul>"},{"location":"guides/installation/#problemas-con-las-migraciones","title":"Problemas con las migraciones","text":"<ul> <li>Ejecuta <code>pnpm supabase db reset</code></li> <li>Verifica los logs en la consola de Supabase</li> </ul>"},{"location":"guides/installation/#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<p>Una vez instalado, puedes:</p> <ol> <li>Explorar la gu\u00eda de desarrollo</li> <li>Configurar el entorno de pruebas</li> <li>Aprender sobre el despliegue</li> </ol>"},{"location":"guides/installation/#soporte","title":"Soporte","text":"<p>Si encuentras alg\u00fan problema durante la instalaci\u00f3n:</p> <ol> <li>Revisa los problemas comunes</li> <li>Busca en los issues existentes</li> <li>Abre un nuevo issue si es necesario</li> </ol>"},{"location":"guides/testing/","title":"Gu\u00eda de Testing","text":"<p>Esta gu\u00eda cubre las diferentes estrategias y herramientas de testing utilizadas en PinteYa!</p>"},{"location":"guides/testing/#vision-general","title":"Visi\u00f3n General","text":"<pre><code>graph TD\n    A[Testing Strategy] --&gt; B[Unit Tests]\n    A --&gt; C[Integration Tests]\n    A --&gt; D[E2E Tests]\n    A --&gt; E[Performance Tests]\n\n    B --&gt; F[Jest]\n    B --&gt; G[React Testing Library]\n\n    C --&gt; H[API Tests]\n    C --&gt; I[Database Tests]\n\n    D --&gt; J[Playwright]\n    D --&gt; K[Cypress]\n\n    E --&gt; L[Lighthouse]\n    E --&gt; M[Web Vitals]</code></pre>"},{"location":"guides/testing/#tests-unitarios","title":"Tests Unitarios","text":""},{"location":"guides/testing/#configuracion-de-jest","title":"Configuraci\u00f3n de Jest","text":"<pre><code>// jest.config.js\nmodule.exports = {\n  testEnvironment: 'jsdom',\n  setupFilesAfterEnv: ['&lt;rootDir&gt;/jest.setup.js'],\n  moduleNameMapper: {\n    '^@/(.*)$': '&lt;rootDir&gt;/$1',\n  },\n  testMatch: ['**/*.test.ts', '**/*.test.tsx'],\n}\n</code></pre>"},{"location":"guides/testing/#ejemplo-de-test-de-componente","title":"Ejemplo de Test de Componente","text":"<pre><code>import { render, screen } from '@testing-library/react'\nimport { ProductCard } from './ProductCard'\n\ndescribe('ProductCard', () =&gt; {\n  it('renders product information correctly', () =&gt; {\n    const product = {\n      name: 'Pintura L\u00e1tex',\n      price: 2500,\n      description: 'Pintura de alta calidad'\n    }\n\n    render(&lt;ProductCard product={product} /&gt;)\n\n    expect(screen.getByText(product.name)).toBeInTheDocument()\n    expect(screen.getByText(`$${product.price}`)).toBeInTheDocument()\n    expect(screen.getByText(product.description)).toBeInTheDocument()\n  })\n\n  it('handles click events', () =&gt; {\n    const onClickMock = jest.fn()\n    render(&lt;ProductCard onClick={onClickMock} /&gt;)\n\n    screen.getByRole('button').click()\n    expect(onClickMock).toHaveBeenCalled()\n  })\n})\n</code></pre>"},{"location":"guides/testing/#test-de-hooks","title":"Test de Hooks","text":"<pre><code>import { renderHook, act } from '@testing-library/react'\nimport { useCart } from './useCart'\n\ndescribe('useCart', () =&gt; {\n  it('adds items to cart', () =&gt; {\n    const { result } = renderHook(() =&gt; useCart())\n\n    act(() =&gt; {\n      result.current.addItem({\n        id: '1',\n        name: 'Producto',\n        price: 100,\n      })\n    })\n\n    expect(result.current.items).toHaveLength(1)\n    expect(result.current.total).toBe(100)\n  })\n})\n</code></pre>"},{"location":"guides/testing/#tests-de-integracion","title":"Tests de Integraci\u00f3n","text":""},{"location":"guides/testing/#api-tests","title":"API Tests","text":"<pre><code>import { createMocks } from 'node-mocks-http'\nimport productsHandler from './products'\n\ndescribe('Products API', () =&gt; {\n  it('returns products list', async () =&gt; {\n    const { req, res } = createMocks({\n      method: 'GET',\n    })\n\n    await productsHandler(req, res)\n\n    expect(res._getStatusCode()).toBe(200)\n    const data = JSON.parse(res._getData())\n    expect(Array.isArray(data.products)).toBeTruthy()\n  })\n})\n</code></pre>"},{"location":"guides/testing/#database-tests","title":"Database Tests","text":"<pre><code>import { supabase } from '@/lib/supabase'\n\ndescribe('Database Operations', () =&gt; {\n  beforeEach(async () =&gt; {\n    // Limpiar datos de prueba\n    await supabase.from('products').delete().neq('id', 0)\n  })\n\n  it('creates and retrieves products', async () =&gt; {\n    const product = {\n      name: 'Test Product',\n      price: 100,\n    }\n\n    const { data: created } = await supabase\n      .from('products')\n      .insert(product)\n      .select()\n      .single()\n\n    expect(created.name).toBe(product.name)\n\n    const { data: retrieved } = await supabase\n      .from('products')\n      .select()\n      .eq('id', created.id)\n      .single()\n\n    expect(retrieved).toEqual(created)\n  })\n})\n</code></pre>"},{"location":"guides/testing/#tests-e2e","title":"Tests E2E","text":""},{"location":"guides/testing/#configuracion-de-playwright","title":"Configuraci\u00f3n de Playwright","text":"<pre><code>// playwright.config.ts\nimport { PlaywrightTestConfig } from '@playwright/test'\n\nconst config: PlaywrightTestConfig = {\n  testDir: './e2e',\n  use: {\n    baseURL: 'http://localhost:3000',\n    screenshot: 'only-on-failure',\n  },\n  projects: [\n    {\n      name: 'Chrome',\n      use: { browserName: 'chromium' },\n    },\n    {\n      name: 'Firefox',\n      use: { browserName: 'firefox' },\n    },\n  ],\n}\n\nexport default config\n</code></pre>"},{"location":"guides/testing/#ejemplo-de-test-e2e","title":"Ejemplo de Test E2E","text":"<pre><code>import { test, expect } from '@playwright/test'\n\ntest('complete checkout flow', async ({ page }) =&gt; {\n  // Login\n  await page.goto('/login')\n  await page.fill('[name=email]', 'test@example.com')\n  await page.fill('[name=password]', 'password123')\n  await page.click('button[type=submit]')\n\n  // Add product to cart\n  await page.goto('/products')\n  await page.click('text=Add to Cart')\n\n  // Checkout\n  await page.goto('/cart')\n  await page.click('text=Proceed to Checkout')\n\n  // Fill shipping info\n  await page.fill('[name=address]', 'Test Street 123')\n  await page.fill('[name=city]', 'Test City')\n  await page.click('text=Continue to Payment')\n\n  // Verify success\n  await expect(page.locator('text=Order Confirmed')).toBeVisible()\n})\n</code></pre>"},{"location":"guides/testing/#tests-de-performance","title":"Tests de Performance","text":""},{"location":"guides/testing/#web-vitals","title":"Web Vitals","text":"<pre><code>import { onCLS, onFID, onLCP } from 'web-vitals'\n\nfunction reportWebVitals(metric) {\n  console.log(metric.name, metric.value)\n\n  // Enviar a an\u00e1lisis\n  analytics.track('Web Vitals', {\n    metric: metric.name,\n    value: metric.value,\n  })\n}\n\nonCLS(reportWebVitals)\nonFID(reportWebVitals)\nonLCP(reportWebVitals)\n</code></pre>"},{"location":"guides/testing/#lighthouse-ci","title":"Lighthouse CI","text":"<pre><code>name: Lighthouse CI\non: [push]\njobs:\n  lighthouse:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run Lighthouse\n        uses: treosh/lighthouse-ci-action@v9\n        with:\n          urls: |\n            https://pinteya.vercel.app/\n            https://pinteya.vercel.app/products\n          budgetPath: ./budget.json\n          uploadArtifacts: true\n</code></pre>"},{"location":"guides/testing/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"guides/testing/#1-organizacion-de-tests","title":"1. Organizaci\u00f3n de Tests","text":"<pre><code>src/\n  components/\n    ProductCard/\n      ProductCard.tsx\n      ProductCard.test.tsx\n      ProductCard.stories.tsx\n  hooks/\n    useCart/\n      useCart.ts\n      useCart.test.ts\n  pages/\n    products/\n      [id].tsx\n      [id].test.tsx\n</code></pre>"},{"location":"guides/testing/#2-mocking","title":"2. Mocking","text":"<pre><code>// Mocking de m\u00f3dulos\njest.mock('@/lib/supabase', () =&gt; ({\n  supabase: {\n    from: jest.fn().mockReturnThis(),\n    select: jest.fn().mockReturnThis(),\n    eq: jest.fn().mockResolvedValue({ data: mockData }),\n  },\n}))\n\n// Mocking de fetch\nglobal.fetch = jest.fn().mockResolvedValue({\n  json: () =&gt; Promise.resolve(mockData),\n})\n</code></pre>"},{"location":"guides/testing/#3-fixtures","title":"3. Fixtures","text":"<pre><code>// fixtures/products.ts\nexport const products = [\n  {\n    id: '1',\n    name: 'Product 1',\n    price: 100,\n  },\n  // ...\n]\n\n// Test\nimport { products } from '../fixtures/products'\n\ntest('renders product list', () =&gt; {\n  render(&lt;ProductList products={products} /&gt;)\n})\n</code></pre>"},{"location":"guides/testing/#automatizacion","title":"Automatizaci\u00f3n","text":""},{"location":"guides/testing/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: Run unit tests\n        run: pnpm test\n\n      - name: Run E2E tests\n        run: pnpm test:e2e\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"guides/testing/#metricas-y-reportes","title":"M\u00e9tricas y Reportes","text":""},{"location":"guides/testing/#cobertura-de-codigo","title":"Cobertura de C\u00f3digo","text":"<pre><code>// jest.config.js\nmodule.exports = {\n  collectCoverage: true,\n  coverageReporters: ['text', 'lcov'],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80,\n    },\n  },\n}\n</code></pre>"},{"location":"guides/testing/#reportes-visuales","title":"Reportes Visuales","text":"<ul> <li>Jest HTML Reporter</li> <li>Playwright HTML Reporter</li> </ul>"},{"location":"guides/testing/#recursos","title":"Recursos","text":"<ul> <li>Jest Documentation</li> <li>React Testing Library</li> <li>Playwright Documentation</li> <li>Web Vitals</li> </ul>"}]}